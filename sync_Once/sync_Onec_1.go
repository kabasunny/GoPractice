package main

import (
	"fmt"
	"runtime"
	"sync"
	"time"
)

type Group struct {
	cancel  func()
	wg      sync.WaitGroup //各ゴルーチンの完了を待たせるためのやつ
	errOnce sync.Once      //指定した関数を一度だけ実行したいときに便利なやつ
	err     error
	str     string
}

func (g *Group) Go1(f func() error) {
	g.wg.Add(1) //Goメソッドが呼び出されるたびに、+1カウント

	go func() {
		defer g.wg.Done() //抜ける時に-1カウント...厳密には、無名関数かゴルーチンを抜けた時なのか同じことか

		if err := f(); err != nil {
			g.errOnce.Do(func() { //ここで無名関数を実装し一度だけ実行される、この場合エラー出なきゃ一度も実行されない
				g.err = err
				if g.cancel != nil {
					g.cancel() //見えない関数かメソッドが実装されてる！！継承！？←違うそうです！！
				}
			})
		}
	}()
}

func main() {
	var mem runtime.MemStats
	var g Group
	g.str = "ある日、プログラミングの世界に迷い込んだカエルがいました。その名も「Go」。Goは、自分が何者なのかを知りたくて、コードの海を飛び回っていました。「私は何ができるのだろう？」とGoは思いました。そこで彼は、自分がどれだけ速く動けるか試すことにしました。彼は一生懸命にコードを書き始めました。しかし、彼が書いたコードはとても長く、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは思いました。しかし、彼は諦めませんでした。彼は再びコードを書き始めました。今度は、彼が書いたコードはとても短く、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再び思いました。しかし、彼は再び諦めませんでした。彼は再々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々思いました。しかし、彼は再々諦めませんでした。彼は再々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々思いました。しかし、彼は再々々諦めませんでした。彼は再々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々思いました。しかし、彼は再々々々諦めませんでした。彼は再々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々思いました。しかし、彼は再々々々々諦めませんでした。彼は再々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々々思いました。しかし、彼は再々々々々々諦めませんでした。彼は再々々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々々々思いました。しかし、彼は再々々々々々々諦めませんでした。彼は再々々々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々々々々思いました。しかし、彼は再々々々々々々々諦めませんでした。彼は再々々々々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々々々々々思いました。しかし、彼は再々々々々々々々々諦めませんでした。彼は再々々々々々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々々々々々々思いました。しかし、彼は再々々々々々々々々々諦めませんでした。彼は再々々々々々々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々々々々々々々思いました。しかし、彼は再々々々々々々々々々々諦めませんでした。彼は再々々々々々々々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど良い長さで、彼自身も何を書いているのかわからなくなってしまいました。「これは一体何だろう？」とGoは再々々々々々々々々々々々思いました。しかし、彼は再々々々々々々々々々々々諦めませんでした。彼は再々々々々々々々々々々々々コードを書き始めました。今度は、彼が書いたコードはちょうど..."
	start := time.Now()

	g.Go1(func() error { //無名関数を参照アドレスポインタの値渡しである
		g.str = "That works!"
		fmt.Println(g.str)
		fmt.Println("That works!")
		g.str = ""
		return nil
	})
	g.Go1(func() error {
		g.str = "The best!"
		fmt.Println(g.str)
		fmt.Println("The best!")
		g.str = ""
		return nil
	})
	g.Go1(func() error {
		g.str = "It's too much fun!"
		fmt.Println(g.str)
		fmt.Println("It's too much fun!")
		g.str = ""
		return nil
	})
	g.Go1(func() error {
		g.str = "It's going well!"
		fmt.Println(g.str)
		fmt.Println("It's going well!")
		g.str = ""
		return nil
	})

	g.wg.Wait() //メインを待たせる
	if g.err != nil {
		fmt.Println("Encountered error:", g.err)
	}

	elapsed := time.Since(start)
	fmt.Printf("Go1処理時間: %s\n", elapsed)

	runtime.ReadMemStats(&mem)
	fmt.Printf("使用メモリ: %v KB\n", mem.Alloc/1024)
}
